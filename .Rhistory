current_max <- current_max %>%
arrange(desc(rank))
current_max <- as.numeric(current_max[1,"rank"])
} else{
current_max <- 0
}
max_rank <- c(max_rank, current_max)
}
max_rank <- c()
for(i in 1:nrow(spreads)){
current_max <- ranked[ranked$x == spreads[[x]][i] & ranked$y <= spreads[[y]][i],]
if(nrow(current_max) > 0){
current_max <- current_max %>%
arrange(desc(rank))
current_max <- as.numeric(current_max[1,"rank"])
} else{
current_max <- 0
}
max_rank <- c(max_rank, current_max)
}
spreads <- mutate(spreads, max_rank = max_rank)
View(spreads)
bin.pal <- scales::div_gradient_pal(low = "#f7faff", mid = "#6baed6", high = "#072f6b", "Lab")(seq(0,1,length.out=length(breaks)-1))
bcc <- bin.pal
spread <- spreads %>%
arrange(x, max_rank, desc = TRUE) %>%
y_spread_ties(gap.size, upper_clamp = 20) %>% x_spread("x", spread_amt = min(diff(x_unique))/4)
x_spread <- function(data, column, spread_amt = 1.25, type = "centered"){
df <- data %>% slice(rep(1:n(), each = 2))
if (type == "centered"){
evens = spread_amt
odds = spread_amt * -1
} else if (type == "forwards"){
evens = spread_amt * 2
odds = spread_amt
} else if (type == "backwards"){
evens = spread_amt * -1
odds = spread_amt * -2
} else {
stop(paste(type,"is not a defined spreading type."))
}
for (i in seq_len(nrow(df))){
if (i %% 2 == 0){
df[[column]][i] = df[[column]][i] + evens
} else {
df[[column]][i] = df[[column]][i] + odds
}
}
return(df)
}
spread <- spreads %>%
arrange(x, max_rank, desc = TRUE) %>%
y_spread_ties(gap.size, upper_clamp = 20) %>% x_spread("x", spread_amt = min(diff(x_unique))/4)
gap.size <- 0
spread <- spreads %>%
arrange(x, max_rank, desc = TRUE) %>%
y_spread_ties(gap.size, upper_clamp = 20) %>% x_spread("x", spread_amt = min(diff(x_unique))/4)
spread <- spreads %>%
arrange(x, max_rank, desc = TRUE) %>%
y_spread_ties(gap.size, upper_clamp = 20) %>% x_spread("x", spread_amt = min(diff(x_unique))/4)
spread <- spreads %>%
arrange(x, max_rank, desc = TRUE) %>%
y_spread_ties(gap.size, upper_clamp = 20) %>% x_spread("x", spread_amt = min(diff(as.numeric(x_unique)))/4)
spread <- spreads %>%
arrange(x, max_rank, desc = TRUE) %>%
y_spread_ties(gap.size, upper_clamp = 20) %>% x_spread("x", spread_amt = min(diff(as.numeric(x_unique)))/4)
warnings()
#Libraries
library(tidyverse)
library(ggbump)
y_spread_ties <- function(data, gap_size=0, upper_clamp = Inf){
df <- data %>% group_by(y, max_rank) %>%
mutate(max_rank = pmin(max_rank - gap_size/n() * row_number(), upper_clamp))
return(df)
}
x_spread <- function(data, column, spread_amt = 1.25, type = "centered"){
df <- data %>% slice(rep(1:n(), each = 2))
if (type == "centered"){
evens = spread_amt
odds = spread_amt * -1
} else if (type == "forwards"){
evens = spread_amt * 2
odds = spread_amt
} else if (type == "backwards"){
evens = spread_amt * -1
odds = spread_amt * -2
} else {
stop(paste(type,"is not a defined spreading type."))
}
for (i in seq_len(nrow(df))){
if (i %% 2 == 0){
df[[column]][i] = df[[column]][i] + evens
} else {
df[[column]][i] = df[[column]][i] + odds
}
}
return(df)
}
#REMOVE. FOR TESTING
data <- gdpdata
y <- "gdp"
x <- "year"
group <- "code"
breaks <- NA
n.breaks <- 6
gap.size <- 0
data <- data %>%
rename("x"=paste(x),"y"=paste(y),"group"=paste(group)) %>%
select(x,y,group)
x<-"x"
y<-"y"
group<-"group"
ranked <- data %>%
group_by(x) %>%
mutate(rank = rank(y, ties.method = "random")) %>%
ungroup()
if(trail.yn == TRUE){
ranked <- ranked %>%
tidyr::complete(x, group, fill=list(y = min(data[y]), rank = 0))
}
ranked <- data %>%
group_by(x) %>%
mutate(rank = rank(y, ties.method = "random")) %>%
ungroup()
if(trail.yn == TRUE){
ranked <- ranked %>%
tidyr::complete(x, group, fill=list(y = min(data[y]), rank = 0))
}
x_unique <- unique(ranked[[x]])
group_unique <- unique(ranked[[group]])
bump.pal <- NA
bin.pal <- NA
if (bump.yn==TRUE){
if (is.na(bump.pal[1])) {
bump.pal <- scales::seq_gradient_pal("moccasin", "lightsalmon4", "Lab")(seq(0,1,length.out=length(unique(data[[group]]))))
}
bump <- ggplot(data = ranked) +
geom_bump(aes(x=x, y=rank, color = fct_reorder(as.factor(group), rank)), linewidth = 1.5, lineend = "round", show.legend = FALSE) +
scale_colour_manual(values=bump.pal) +
scale_y_continuous(breaks = 1:length(unique(data[[group]])), name = "Rank")
}
bump.yn <-TRUE
if (is.na(bump.pal[1])) {
bump.pal <- scales::seq_gradient_pal("moccasin", "lightsalmon4", "Lab")(seq(0,1,length.out=length(unique(data[[group]]))))
}
bump <- ggplot(data = ranked) +
geom_bump(aes(x=x, y=rank, color = fct_reorder(as.factor(group), rank)), linewidth = 1.5, lineend = "round", show.legend = FALSE) +
scale_colour_manual(values=bump.pal) +
scale_y_continuous(breaks = 1:length(unique(data[[group]])), name = "Rank")
if (bump.yn==TRUE){
if (is.na(bump.pal[1])) {
bump.pal <- scales::seq_gradient_pal("moccasin", "lightsalmon4", "Lab")(seq(0,1,length.out=length(unique(data[[group]]))))
}
bump <- ggplot(data = ranked) +
geom_bump(aes(x=x, y=rank, color = fct_reorder(as.factor(group), rank)), linewidth = 1.5, lineend = "round", show.legend = FALSE) +
scale_colour_manual(values=bump.pal) +
scale_y_continuous(breaks = 1:length(unique(data[[group]])), name = "Rank")
}
if (is.na(bin.pal[1])) {
bin.pal <- scales::div_gradient_pal(low = "#f7faff", mid = "#6baed6", high = "#072f6b", "Lab")(seq(0,1,length.out=length(breaks)-1))
}
bcc <- bin.pal
cc <- bump.pal
bin.pal <- scales::div_gradient_pal(low = "#f7faff", mid = "#6baed6", high = "#072f6b", "Lab")(seq(0,1,length.out=length(breaks)-1))
bcc <- bin.pal
cc <- bump.pal
bin.pal <- scales::div_gradient_pal(low = "#f7faff", mid = "#6baed6", high = "#072f6b", "Lab")(seq(0,1,length.out=length(breaks)-1))
bin.pal <- scales::div_gradient_pal(low = "#f7faff", mid = "#6baed6", high = "#072f6b", "Lab")(seq(0,1,length.out=length(breaks)-1))
bin.pal
if (is.na(breaks[1])) {
breaks <- round((max(data[[y]])-min(data[[y]]))/n.breaks*c(0:n.breaks)+min(data[[y]]),2)
}
breaks <- round((max(data[[y]])-min(data[[y]]))/n.breaks*c(0:n.breaks)+min(data[[y]]),2)
bin.pal <- scales::div_gradient_pal(low = "#f7faff", mid = "#6baed6", high = "#072f6b", "Lab")(seq(0,1,length.out=length(breaks)-1))
bcc <- bin.pal
spreads <- expand.grid(x= x_unique, y= breaks[-1])
max_rank <- c()
for(i in 1:nrow(spreads)){
current_max <- ranked[ranked$x == spreads[[x]][i] & ranked$y <= spreads[[y]][i],]
if(nrow(current_max) > 0){
current_max <- current_max %>%
arrange(desc(rank))
current_max <- as.numeric(current_max[1,"rank"])
} else{
current_max <- 0
}
max_rank <- c(max_rank, current_max)
}
spreads <- mutate(spreads, max_rank = max_rank)
spread <- spreads %>%
arrange(x, max_rank, desc = TRUE) %>%
y_spread_ties(gap.size, upper_clamp = 20) %>% x_spread("x", spread_amt = min(diff(as.numeric(x_unique)))/4)
as.numeric(x_unique)
diff(as.numeric(x_unique))
spread <- spreads %>%
arrange(x, max_rank, desc = TRUE) %>%
y_spread_ties(gap.size, upper_clamp = 20) %>%
x_spread(x, spread_amt = min(diff(as.numeric(x_unique)))/4)
.y_spread_ties <- function(data, gap_size=0, upper_clamp = Inf){
df <- data %>% group_by(y, max_rank) %>%
mutate(max_rank = pmin(max_rank - gap_size/n() * row_number(), upper_clamp))
return(df)
}
.x_spread <- function(data, column, spread_amt = 1.25, type = "centered"){
df <- data %>% slice(rep(1:n(), each = 2))
if (type == "centered"){
evens = spread_amt
odds = spread_amt * -1
} else if (type == "forwards"){
evens = spread_amt * 2
odds = spread_amt
} else if (type == "backwards"){
evens = spread_amt * -1
odds = spread_amt * -2
} else {
stop(paste(type,"is not a defined spreading type."))
}
for (i in seq_len(nrow(df))){
if (i %% 2 == 0){
df[column][i] = as.numeric(df[column][i]) + evens
} else {
df[column][i] = as.numeric(df[column][i]) + odds
}
}
return(df)
}
spread <- spreads %>%
arrange(x, max_rank, desc = TRUE) %>%
.y_spread_ties(gap.size, upper_clamp = 20) %>%
.x_spread(x, spread_amt = min(diff(as.numeric(x_unique)))/4)
spread <- spreads %>%
arrange(x, max_rank, desc = TRUE) %>%
.y_spread_ties(gap.size, upper_clamp = 20) %>%
.x_spread(x, spread_amt = min(diff(as.numeric(x_unique)))/4)
.y_spread_ties <- function(data, gap_size=0, upper_clamp = Inf){
df <- data %>% group_by(y, max_rank) %>%
mutate(max_rank = pmin(max_rank - gap_size/n() * row_number(), upper_clamp))
return(df)
}
.x_spread <- function(data, column, spread_amt = 1.25, type = "centered"){
df <- data %>% slice(rep(1:n(), each = 2))
if (type == "centered"){
evens = spread_amt
odds = spread_amt * -1
} else if (type == "forwards"){
evens = spread_amt * 2
odds = spread_amt
} else if (type == "backwards"){
evens = spread_amt * -1
odds = spread_amt * -2
} else {
stop(paste(type,"is not a defined spreading type."))
}
for (i in seq_len(nrow(df))){
if (i %% 2 == 0){
df[[column]][i] = as.numeric(df[[column]][i]) + evens
} else {
df[[column]][i] = as.numeric(df[[column]][i]) + odds
}
}
return(df)
}
spread <- spreads %>%
arrange(x, max_rank, desc = TRUE) %>%
.y_spread_ties(gap.size, upper_clamp = 20) %>%
.x_spread(x, spread_amt = min(diff(as.numeric(x_unique)))/4)
warning()
warnings()
spread <- spreads %>%
arrange(x, max_rank, desc = TRUE) %>%
.y_spread_ties(gap.size, upper_clamp = 20) %>%
.x_spread(x, spread_amt = min(diff(as.numeric(x_unique)))/4)
warnings()
df[x][i] = as.numeric(df[x][i]) + evens
#REMOVE. FOR TESTING
data <- gdpdata
y <- "gdp"
x <- "year"
group <- "code"
breaks <- NA
n.breaks <- 6
gap.size <- 0
bump.pal <- NA
bin.pal <- NA
bump.yn <-TRUE
data <- data %>%
rename("x"=paste(x),"y"=paste(y),"group"=paste(group)) %>%
select(x,y,group)
x<-"x"
y<-"y"
group<-"group"
ranked <- data %>%
group_by(x) %>%
mutate(rank = rank(y, ties.method = "random")) %>%
ungroup() %>%
mutate(x = as.numeric(x), y = as.numeric(y))
x_unique <- unique(ranked[[x]])
group_unique <- unique(ranked[[group]])
if (bump.yn==TRUE){
if (is.na(bump.pal[1])) {
bump.pal <- scales::seq_gradient_pal("moccasin", "lightsalmon4", "Lab")(seq(0,1,length.out=length(unique(data[[group]]))))
}
bump <- ggplot(data = ranked) +
geom_bump(aes(x=x, y=rank, color = fct_reorder(as.factor(group), rank)), linewidth = 1.5, lineend = "round", show.legend = FALSE) +
scale_colour_manual(values=bump.pal) +
scale_y_continuous(breaks = 1:length(unique(data[[group]])), name = "Rank")
}
if (is.na(breaks[1])) {
breaks <- round((max(data[[y]])-min(data[[y]]))/n.breaks*c(0:n.breaks)+min(data[[y]]),2)
}
if (is.na(bin.pal[1])) {
bin.pal <- scales::div_gradient_pal(low = "#f7faff", mid = "#6baed6", high = "#072f6b", "Lab")(seq(0,1,length.out=length(breaks)-1))
}
bcc <- bin.pal
cc <- bump.pal
spreads <- expand.grid(x= x_unique, y= breaks[-1])
max_rank <- c()
for(i in 1:nrow(spreads)){
current_max <- ranked[ranked$x == spreads[[x]][i] & ranked$y <= spreads[[y]][i],]
if(nrow(current_max) > 0){
current_max <- current_max %>%
arrange(desc(rank))
current_max <- as.numeric(current_max[1,"rank"])
} else{
current_max <- 0
}
max_rank <- c(max_rank, current_max)
}
spreads <- mutate(spreads, max_rank = max_rank)
spread <- spreads %>%
arrange(x, max_rank, desc = TRUE) %>%
.y_spread_ties(gap.size, upper_clamp = 20) %>%
.x_spread(x, spread_amt = min(diff(x_unique))/4)
View(spread)
p <- ggplot(spread, aes()) +
geom_ribbon(position = 'identity', aes(x=x, ymax=max_rank+0.5, ymin=0, fill=fct_reorder(as.factor(y), y, .desc = TRUE))) +
scale_fill_manual(values = bcc, name = "y<=") +
scale_y_continuous(breaks = c(1:max(ranked$rank)), labels = c(max(ranked$rank):1), name = "Rank") +
scale_x_continuous(breaks = x_unique) +
theme_bw() +
theme(legend.key.height= unit(0.75, 'cm'))
if(bump.yn == TRUE){
p <- p +
geom_bump(data = ranked, aes(x=x, y=rank, color = fct_reorder(as.factor(group), rank)), linewidth = 1.5, lineend = "round", show.legend = FALSE) +
scale_colour_manual(values=cc) +
coord_cartesian(xlim = c(min(x_unique)-min(diff(x_unique))/4, max(x_unique)+min(diff(x_unique))/4),
ylim = c(1, max(ranked[["rank"]])))
if (repel.yn == TRUE)
p <- p +
ggrepel::geom_label_repel(data = final_rank, aes(label = group, x=x, y=rank), size = 2, min.segment.length = 0.1, box.padding = 0.2, force = 0.8, alpha = 0.7)
}
p <- p +
ggrepel::geom_label_repel(data = final_rank, aes(label = group, x=x, y=rank), size = 2, min.segment.length = 0.1, box.padding = 0.2, force = 0.8, alpha = 0.7)
final_rank <- ranked %>%
group_by(group) %>%
filter(x==max(x))
View(final_rank)
p <- p +
ggrepel::geom_label_repel(data = final_rank, aes(label = group, x=x, y=rank), size = 2, min.segment.length = 0.1, box.padding = 0.2, force = 0.8, alpha = 0.7)
return(p)
p
background_bump <- function(data,
x="x",
y="y",
group="group",
breaks = NA,
n.breaks = 6,
bump.yn = TRUE,
bump.pal = NA,
bin.pal = NA,
trail.yn = FALSE,
repel.yn = TRUE,
gap.size = 0
){
#REMOVE. FOR TESTING
data <- gdpdata
y <- "gdp"
x <- "year"
group <- "code"
breaks <- NA
n.breaks <- 6
gap.size <- 0
bump.pal <- NA
bin.pal <- NA
bump.yn <-TRUE
#REMOVE. FOR TESTING
data <- data %>%
rename("x"=paste(x),"y"=paste(y),"group"=paste(group)) %>%
select(x,y,group)
x<-"x"
y<-"y"
group<-"group"
ranked <- data %>%
group_by(x) %>%
mutate(rank = rank(y, ties.method = "random")) %>%
ungroup() %>%
mutate(x = as.numeric(x), y = as.numeric(y))
final_rank <- ranked %>%
group_by(group) %>%
filter(x==max(x))
if(trail.yn == TRUE){
ranked <- ranked %>%
tidyr::complete(x, group, fill=list(y = min(data[y]), rank = 0))
}
x_unique <- unique(ranked[[x]])
group_unique <- unique(ranked[[group]])
if (bump.yn==TRUE){
if (is.na(bump.pal[1])) {
bump.pal <- scales::seq_gradient_pal("moccasin", "lightsalmon4", "Lab")(seq(0,1,length.out=length(unique(data[[group]]))))
}
bump <- ggplot(data = ranked) +
geom_bump(aes(x=x, y=rank, color = fct_reorder(as.factor(group), rank)), linewidth = 1.5, lineend = "round", show.legend = FALSE) +
scale_colour_manual(values=bump.pal) +
scale_y_continuous(breaks = 1:length(unique(data[[group]])), name = "Rank")
}
if (is.na(breaks[1])) {
breaks <- round((max(data[[y]])-min(data[[y]]))/n.breaks*c(0:n.breaks)+min(data[[y]]),2)
}
if (is.na(bin.pal[1])) {
bin.pal <- scales::div_gradient_pal(low = "#f7faff", mid = "#6baed6", high = "#072f6b", "Lab")(seq(0,1,length.out=length(breaks)-1))
}
bcc <- bin.pal
cc <- bump.pal
spreads <- expand.grid(x= x_unique, y= breaks[-1])
max_rank <- c()
for(i in 1:nrow(spreads)){
current_max <- ranked[ranked$x == spreads[[x]][i] & ranked$y <= spreads[[y]][i],]
if(nrow(current_max) > 0){
current_max <- current_max %>%
arrange(desc(rank))
current_max <- as.numeric(current_max[1,"rank"])
} else{
current_max <- 0
}
max_rank <- c(max_rank, current_max)
}
spreads <- mutate(spreads, max_rank = max_rank)
spread <- spreads %>%
arrange(x, max_rank, desc = TRUE) %>%
.y_spread_ties(gap.size, upper_clamp = 20) %>%
.x_spread(x, spread_amt = min(diff(x_unique))/4)
p <- ggplot(spread, aes()) +
geom_ribbon(position = 'identity', aes(x=x, ymax=max_rank+0.5, ymin=0, fill=fct_reorder(as.factor(y), y, .desc = TRUE))) +
scale_fill_manual(values = bcc, name = "y<=") +
scale_y_continuous(breaks = c(1:max(ranked$rank)), labels = c(max(ranked$rank):1), name = "Rank") +
scale_x_continuous(breaks = x_unique) +
theme_bw() +
theme(legend.key.height= unit(0.75, 'cm'))
if(bump.yn == TRUE){
p <- p +
geom_bump(data = ranked, aes(x=x, y=rank, color = fct_reorder(as.factor(group), rank)), linewidth = 1.5, lineend = "round", show.legend = FALSE) +
scale_colour_manual(values=cc) +
coord_cartesian(xlim = c(min(x_unique)-min(diff(x_unique))/4, max(x_unique)+min(diff(x_unique))/4),
ylim = c(1, max(ranked[["rank"]])))
if (repel.yn == TRUE)
p <- p +
ggrepel::geom_label_repel(data = final_rank, aes(label = group, x=x, y=rank), size = 2, min.segment.length = 0.1, box.padding = 0.2, force = 0.8, alpha = 0.7)
}
return(p)
}
devtools::load_all(".")
background_bump(gdpdata, x= "year", y="gdp",group="code")
upto20 <- gdpdata %>% filter(year != 2022)
View(upto20)
background_bump(upto20, x= "year", y="gdp",group="code")
View(upto20)
background_bump(upto20, x= "year", y="gdp",group="code", n.breaks = 8)
upto20 <- gdpdata %>% filter(year != 2022)
background_bump(upto20, x= "year", y="gdp",group="code", n.breaks = 8)
devtools::load_all(".")
background_bump(upto20, x= "year", y="gdp",group="code", n.breaks = 8)
View(upto20)
devtools::load_all(".")
devtools::load_all(".")
background_bump(upto20, x= "year", y="gdp",group="code", n.breaks = 8)
background_bump(upto20, x= "year", y="gdp",group="code", n.breaks = 6)
data("bggsoloranks")
devtools::load_all(".")
library(tidyverse)
library(PlackettLuce)
user_rank <- read_csv("UserRankings.csv")
pivoted <- user_rank %>%
pivot_wider(names_from = Game, values_from = Rank) %>%
select(c("User", "Spirit Island","Mage Knight Board Game", "Marvel Champions: The Card Game",
"Arkham Horror: The Card Game", "Lord of the Rings: The Card Game", "Too Many Bones",
"Dune: Imperium", "Ark Nova", "Terraforming Mars", "Imperium: Classics"))
pivoted <- pivoted[rowSums(is.na(pivoted)) != ncol(pivoted)-1, ] %>% #remove rows w/ all NA
group_by(User) %>%
filter(n() >= 5) %>% #only users with at least 3 of the selected games ranked are included. 567 w/ 3 of top 10, 199 w/ 5
summarise(across(,~sum(., na.rm = TRUE)))
pivoted
#11-20:
#Gloomhaven, Final Girl, Aeon's End, Gaia Project, Robinson Crusoe: Adventures on the Cursed Island, Lost Ruins of Arnak, Under Falling Skies, Cascadia, A Feast for Odin, Sprawlopolis
BradTerrTiles(pivoted, reps = 1000, plots.yn = FALSE)
BradTerrTiles(pivoted[-1], reps = 1000, plots.yn = FALSE)
BradTerrTiles(pivoted[-1], reps = 5000, plots.yn = FALSE)[1]
devtools::load_all(".")
BradTerrTiles(bggsoloranks, reps = 1000)
pivoted <- user_rank %>%
pivot_wider(names_from = Game, values_from = Rank) %>%
select(c("User", "Spirit Island","Mage Knight Board Game", "Marvel Champions: The Card Game",
"Arkham Horror: The Card Game", "Lord of the Rings: The Card Game", "Too Many Bones",
"Dune: Imperium", "Ark Nova", "Terraforming Mars", "Imperium: Classics"))
pivoted <- pivoted[rowSums(is.na(pivoted)) != ncol(pivoted)-1, ] %>% #remove rows w/ all NA
group_by(User) %>%
filter(n() >= 5) %>% #only users with at least 3 of the selected games ranked are included. 567 w/ 3 of top 10, 199 w/ 5
summarise(across(,~sum(., na.rm = TRUE)))
pivoted
#11-20:
#Gloomhaven, Final Girl, Aeon's End, Gaia Project, Robinson Crusoe: Adventures on the Cursed Island, Lost Ruins of Arnak, Under Falling Skies, Cascadia, A Feast for Odin, Sprawlopolis
BradTerrTiles(pivoted, reps = 1000)
BradTerrTiles(pivoted[-1], reps = 1000)
